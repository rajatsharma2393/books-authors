{"ast":null,"code":"import _objectSpread from \"/Users/rajatsharma/Documents/Practice/React/books_authors/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/rajatsharma/Documents/Practice/React/books_authors/src/components/Author/manageAuthor.js\";\nimport React, { Component } from \"react\";\nimport { updateAuthor, addAuthor } from \"../../actions/authorActions\";\nimport { connect } from \"react-redux\";\n\nclass ManageAuthor extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      author: _objectSpread({}, this.props.currentAuthor)\n    };\n\n    this.handleChange = event => {\n      let _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      this.setState({\n        author: _objectSpread({}, this.state.author, {\n          [name]: value\n        })\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.author.id) {\n        this.props.updateAuthor(this.state.author);\n      } else {\n        this.props.addAuthor(this.state.author);\n      }\n\n      this.props.history.push(\"/authors\");\n    };\n  }\n\n  render() {\n    let author = this.state.author; // let authors = this.props.authors.map(author => (\n    //   <option\n    //     value={author.id}\n    //     key={author.id}\n    //     defaultValue={book.authorId === author.id}\n    //   >\n    //     {author.name}\n    //   </option>\n    // ));\n\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Author Id:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: author.id,\n      onChange: this.handleChange,\n      name: \"id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Author Name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: author.name,\n      onChange: this.handleChange,\n      name: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, author.id === 0 ? \"Add\" : \"Update\"));\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const authorId = parseInt(ownProps.match.params.id);\n  let currentAuthor = {\n    id: 0,\n    name: \"\",\n    bookIds: []\n  };\n\n  if (authorId !== 0 && state.authors.length > 0) {\n    currentAuthor = state.authors.find(author => author.id === authorId) || currentAuthor;\n  }\n\n  return {\n    currentAuthor: currentAuthor,\n    books: state.books,\n    authors: state.authors\n  };\n}\n\nconst mapDispatchToProps = {\n  updateAuthor,\n  addAuthor\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageAuthor);","map":{"version":3,"sources":["/Users/rajatsharma/Documents/Practice/React/books_authors/src/components/Author/manageAuthor.js"],"names":["React","Component","updateAuthor","addAuthor","connect","ManageAuthor","state","author","props","currentAuthor","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","id","history","push","render","mapStateToProps","ownProps","authorId","parseInt","match","params","bookIds","authors","length","find","books","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { updateAuthor, addAuthor } from \"../../actions/authorActions\";\nimport { connect } from \"react-redux\";\n\nclass ManageAuthor extends Component {\n  state = { author: { ...this.props.currentAuthor } };\n\n  handleChange = event => {\n    let { name, value } = event.target;\n    this.setState({\n      author: {\n        ...this.state.author,\n        [name]: value\n      }\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.state.author.id) {\n      this.props.updateAuthor(this.state.author);\n    } else {\n      this.props.addAuthor(this.state.author);\n    }\n    this.props.history.push(\"/authors\");\n  };\n\n  render() {\n    let author = this.state.author;\n\n    // let authors = this.props.authors.map(author => (\n    //   <option\n    //     value={author.id}\n    //     key={author.id}\n    //     defaultValue={book.authorId === author.id}\n    //   >\n    //     {author.name}\n    //   </option>\n    // ));\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"id\">Author Id:</label>\n        <input\n          type=\"text\"\n          value={author.id}\n          onChange={this.handleChange}\n          name=\"id\"\n        />\n        <br />\n        <label htmlFor=\"name\">Author Name:</label>\n        <input\n          type=\"text\"\n          value={author.name}\n          onChange={this.handleChange}\n          name=\"name\"\n        />\n        <br />\n        <br />\n        <button type=\"submit\">{author.id === 0 ? \"Add\" : \"Update\"}</button>\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const authorId = parseInt(ownProps.match.params.id);\n\n  let currentAuthor = {\n    id: 0,\n    name: \"\",\n    bookIds: []\n  };\n\n  if (authorId !== 0 && state.authors.length > 0) {\n    currentAuthor =\n      state.authors.find(author => author.id === authorId) || currentAuthor;\n  }\n\n  return {\n    currentAuthor: currentAuthor,\n    books: state.books,\n    authors: state.authors\n  };\n}\n\nconst mapDispatchToProps = {\n  updateAuthor,\n  addAuthor\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageAuthor);\n"]},"metadata":{},"sourceType":"module"}