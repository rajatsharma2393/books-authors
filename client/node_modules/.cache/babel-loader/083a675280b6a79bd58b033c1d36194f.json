{"ast":null,"code":"var _jsxFileName = \"/Users/rajatsharma/Documents/Practice/React/books_authors/src/components/Books/manageBook.js\";\nimport React, { Component } from \"react\";\nimport { updateBook, addBook } from \"../../actions/bookActions\";\nimport { connect } from \"react-redux\";\n\nclass ManageBook extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = event => {\n      console.log(event.target);\n    };\n  }\n\n  render() {\n    let book = this.props.currentBook;\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: book.id,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      value: book.name,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const bookId = ownProps.match.params.id;\n  let currentBook = {\n    bookId: 0,\n    bookName: \"\",\n    authorId: 0\n  };\n\n  if (bookId && state.books.length > 0) {\n    currentBook = state.books.find(book => book.id === bookId) || currentBook;\n  }\n\n  return {\n    currentBook: currentBook,\n    books: state.books,\n    authors: state.authors\n  };\n}\n\nconst mapDispatchToProps = {\n  updateBook,\n  addBook\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageBook);","map":{"version":3,"sources":["/Users/rajatsharma/Documents/Practice/React/books_authors/src/components/Books/manageBook.js"],"names":["React","Component","updateBook","addBook","connect","ManageBook","handleChange","event","console","log","target","render","book","props","currentBook","id","name","mapStateToProps","state","ownProps","bookId","match","params","bookName","authorId","books","length","find","authors","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,2BAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAAA;AAAA;;AAAA,SACjCK,YADiC,GAClBC,KAAK,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;AACD,KAHgC;AAAA;;AAIjCC,EAAAA,MAAM,GAAG;AACP,QAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,WAAtB;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEF,IAAI,CAACG,EAA/B;AAAmC,MAAA,QAAQ,EAAE,KAAKT,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEM,IAAI,CAACI,IAA/B;AAAqC,MAAA,QAAQ,EAAE,KAAKV,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAbgC;;AAgBnC,SAASW,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AACxC,QAAMC,MAAM,GAAGD,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBP,EAArC;AAEA,MAAID,WAAW,GAAG;AAChBM,IAAAA,MAAM,EAAE,CADQ;AAEhBG,IAAAA,QAAQ,EAAE,EAFM;AAGhBC,IAAAA,QAAQ,EAAE;AAHM,GAAlB;;AAMA,MAAIJ,MAAM,IAAIF,KAAK,CAACO,KAAN,CAAYC,MAAZ,GAAqB,CAAnC,EAAsC;AACpCZ,IAAAA,WAAW,GAAGI,KAAK,CAACO,KAAN,CAAYE,IAAZ,CAAiBf,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYK,MAArC,KAAgDN,WAA9D;AACD;;AAED,SAAO;AACLA,IAAAA,WAAW,EAAEA,WADR;AAELW,IAAAA,KAAK,EAAEP,KAAK,CAACO,KAFR;AAGLG,IAAAA,OAAO,EAAEV,KAAK,CAACU;AAHV,GAAP;AAKD;;AAED,MAAMC,kBAAkB,GAAG;AACzB3B,EAAAA,UADyB;AAEzBC,EAAAA;AAFyB,CAA3B;AAKA,eAAeC,OAAO,CACpBa,eADoB,EAEpBY,kBAFoB,CAAP,CAGbxB,UAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { updateBook, addBook } from \"../../actions/bookActions\";\nimport { connect } from \"react-redux\";\n\nclass ManageBook extends Component {\n  handleChange = event => {\n    console.log(event.target);\n  };\n  render() {\n    let book = this.props.currentBook;\n\n    return (\n      <form>\n        <input type=\"text\" value={book.id} onChange={this.handleChange} />\n        <input type=\"text\" value={book.name} onChange={this.handleChange} />\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const bookId = ownProps.match.params.id;\n\n  let currentBook = {\n    bookId: 0,\n    bookName: \"\",\n    authorId: 0\n  };\n\n  if (bookId && state.books.length > 0) {\n    currentBook = state.books.find(book => book.id === bookId) || currentBook;\n  }\n\n  return {\n    currentBook: currentBook,\n    books: state.books,\n    authors: state.authors\n  };\n}\n\nconst mapDispatchToProps = {\n  updateBook,\n  addBook\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageBook);\n"]},"metadata":{},"sourceType":"module"}