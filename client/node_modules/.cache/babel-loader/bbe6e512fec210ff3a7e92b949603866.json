{"ast":null,"code":"import _objectSpread from \"/Users/rajatsharma/Documents/Practice/React/books_authors/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/rajatsharma/Documents/Practice/React/books_authors/src/components/Books/manageBook.js\";\nimport React, { Component } from \"react\";\nimport { updateBook, addBook } from \"../../actions/bookActions\";\nimport { connect } from \"react-redux\";\n\nclass ManageBook extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = _objectSpread({}, this.props.currentBook);\n\n    this.handleChange = event => {\n      let _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n      this.setState(_objectSpread({}, this.state, {\n        [name]: value\n      }));\n    };\n  }\n\n  render() {\n    let book = this.props.currentBook;\n    let authors = this.props.authors.map(author => React.createElement(\"option\", {\n      value: author.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, author.name));\n    return React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"bookId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Book Id:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: book.id,\n      onChange: this.handleChange,\n      name: \"bookId\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"bookName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Book Name:\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: book.name,\n      onChange: this.handleChange,\n      name: \"bookName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      value: book.authorId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, authors));\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const bookId = parseInt(ownProps.match.params.id);\n  let currentBook = {\n    bookId: 0,\n    bookName: \"\",\n    authorId: 0\n  };\n\n  if (bookId !== 0 && state.books.length > 0) {\n    currentBook = state.books.find(book => book.id === bookId) || currentBook;\n  }\n\n  return {\n    currentBook: currentBook,\n    books: state.books,\n    authors: state.authors\n  };\n}\n\nconst mapDispatchToProps = {\n  updateBook,\n  addBook\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageBook);","map":{"version":3,"sources":["/Users/rajatsharma/Documents/Practice/React/books_authors/src/components/Books/manageBook.js"],"names":["React","Component","updateBook","addBook","connect","ManageBook","state","props","currentBook","handleChange","event","target","name","value","setState","render","book","authors","map","author","id","authorId","mapStateToProps","ownProps","bookId","parseInt","match","params","bookName","books","length","find","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { updateBook, addBook } from \"../../actions/bookActions\";\nimport { connect } from \"react-redux\";\n\nclass ManageBook extends Component {\n  state = { ...this.props.currentBook };\n\n  handleChange = event => {\n    let { name, value } = event.target;\n    this.setState({\n      ...this.state,\n      [name]: value\n    });\n  };\n\n  render() {\n    let book = this.props.currentBook;\n    let authors = this.props.authors.map(author => (\n      <option value={author.id}>{author.name}</option>\n    ));\n    return (\n      <form>\n        <label htmlFor=\"bookId\">Book Id:</label>\n        <input\n          type=\"text\"\n          value={book.id}\n          onChange={this.handleChange}\n          name=\"bookId\"\n        />\n        <br />\n        <label htmlFor=\"bookName\">Book Name:</label>\n        <input\n          type=\"text\"\n          value={book.name}\n          onChange={this.handleChange}\n          name=\"bookName\"\n        />\n        <select value={book.authorId}>{authors}</select>\n      </form>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const bookId = parseInt(ownProps.match.params.id);\n\n  let currentBook = {\n    bookId: 0,\n    bookName: \"\",\n    authorId: 0\n  };\n\n  if (bookId !== 0 && state.books.length > 0) {\n    currentBook = state.books.find(book => book.id === bookId) || currentBook;\n  }\n\n  return {\n    currentBook: currentBook,\n    books: state.books,\n    authors: state.authors\n  };\n}\n\nconst mapDispatchToProps = {\n  updateBook,\n  addBook\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageBook);\n"]},"metadata":{},"sourceType":"module"}